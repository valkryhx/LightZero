from easydict import EasyDict
import logging
import sys
logging.basicConfig(level=logging.ERROR)
# ==============================================================
# begin of the most frequently changed config specified by the user
# ==============================================================
collector_env_num = 8
n_episode = 8

evaluator_env_num = 100
num_simulations = 25


update_per_collect = 100
batch_size = 16# 256

# 使用 efficientzero 那么减少max_env_step 试试
max_env_step =int(3e3)# int(6e3)# int(1e5) #max_env_step * num_simulations /num_unroll_steps =learner.train_iter=2000
reanalyze_ratio = 0
# ==============================================================
# end of the most frequently changed config specified by the user
# 所有配置和mazegame_muzero_config_for_test.py 保持一致
# ==============================================================

mymaze_muzero_config = dict(
    exp_name=f'data_mz_ctree/mymaze_efficientzero_ns{num_simulations}_upc{update_per_collect}_rr{reanalyze_ratio}_seed0',
    env=dict(
        env_id='MyMaze-v1',
        continuous=False,
        obs_shape=(1, 4, 4),
        channel_last=False,
        manually_discretization=False,
        collector_env_num=collector_env_num,
        evaluator_env_num=evaluator_env_num,
        n_evaluator_episode=evaluator_env_num,
        manager=dict(shared_memory=False, ),
    ),
    policy=dict(
        model=dict(
            observation_shape=(1,4,4),#16,#4,
            channel_last=False,
            image_channel=1,
            action_space_size=4,#2,
            #model_type='conv',#'mlp', 
            #lstm_hidden_size=128,
            #latent_state_dim=128,
            self_supervised_learning_loss=True,  # NOTE: default is False.
            discrete_action_encoding_type='one_hot',
            #norm_type='BN', 
            
            num_res_blocks=2,
            num_channels=32,
            # add 虽然默认是300 但是还是明确写出来好
            # # support_scale 和 categorical_distribution=True 搭配使用 categorical_distribution 默认是True
            # https://github.com/valkryhx/LightZero/blob/4d73183c5b3a40cba3a5a66bf792bb87016d92d2/lzero/policy/muzero.py#L52C13-L52C86
            support_scale=300,
            reward_support_size=300*2 + 1,
            value_support_size=300*2 + 1,
            # add 默认是True 但这里也明确写出来 
            categorical_distribution=True,
            
        ),
        cuda=True,

        num_unroll_steps=5,
        td_steps=6,

        env_type='not_board_games',
        action_type='varied_action_space',
        game_segment_length=50,
        update_per_collect=update_per_collect,
        batch_size=batch_size,
        optim_type='Adam',
        lr_piecewise_constant_decay=False,
        learning_rate=0.003,
        ssl_loss_weight=2,  # NOTE: default is 0.
        num_simulations=num_simulations,
        reanalyze_ratio=reanalyze_ratio,
        n_episode=n_episode,
        eval_freq=int(50),
        replay_buffer_size=int(1e6),  # the size/capacity of replay_buffer, in the terms of transitions.
        collector_env_num=collector_env_num,
        evaluator_env_num=evaluator_env_num,
    ),
)

mymaze_muzero_config = EasyDict(mymaze_muzero_config)
main_config = mymaze_muzero_config

mymaze_muzero_create_config = dict(
    env=dict(
        type='mymaze_lightzero',
        import_names=['zoo.classic_control.mazegame.envs.mazegame_lightzero_env'],
    ),
    env_manager=dict(type='subprocess'),
    policy=dict(
        type='efficientzero',#'muzero',
        import_names=['lzero.policy.efficientzero'],#['lzero.policy.muzero'],
    ),
)
mymaze_muzero_create_config = EasyDict(mymaze_muzero_create_config)
create_config = mymaze_muzero_create_config

if __name__ == "__main__":
    # Users can use different train entry by specifying the entry_type.
    entry_type = "train_muzero"  # options={"train_muzero", "train_muzero_with_gym_env"}

    if entry_type == "train_muzero":
        from lzero.entry import train_muzero ,eval_muzero
    elif entry_type == "train_muzero_with_gym_env":
        """
        The ``train_muzero_with_gym_env`` entry means that the environment used in the training process is generated by wrapping the original gym environment with LightZeroEnvWrapper.
        Users can refer to lzero/envs/wrappers for more details.
        """
        from lzero.entry import train_muzero_with_gym_env as train_muzero
        from lzero.entry import eval_muzero_with_gym_env as eval_muzero
    if len(sys.argv)>1:
        #print(sys.argv)
        print(f"eval模式")
        res = eval_muzero(
            input_cfg=[main_config, create_config],
            seed= 0,
            model= None,
            print_seed_details= False,
            model_path =sys.argv[1],# '/kaggle/working/LightZero/data_mz_ctree/mymaze_muzero_ns25_upc100_rr0_seed0_240301_065201/ckpt/ckpt_best.pth.tar',
            num_episodes_each_seed= 1
            )
        print(res)
    else :
        print(f"train模式")
        train_muzero([main_config, create_config], seed=0, max_env_step=max_env_step)
        #res = eval_muzero(
        #    input_cfg=[main_config, create_config],
        #    seed= 0,
        #    model= None,
        #    model_path = '/kaggle/working/LightZero/data_mz_ctree/cartpole_muzero_ns25_upc100_rr0_seed0_240229_114840/ckpt/ckpt_best.pth.tar',
        #    num_episodes_each_seed= 1,
        #    print_seed_details= False)
        #print(res)
